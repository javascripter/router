"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={title:"Header buttons",sidebar_position:6},i=void 0,s={unversionedId:"guides/header-buttons",id:"guides/header-buttons",title:"Header buttons",description:"Ports the guide React Navigation: header buttons to Expo Router.",source:"@site/docs/guides/header-buttons.md",sourceDirName:"guides",slug:"/guides/header-buttons",permalink:"/router/docs/guides/header-buttons",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/guides/header-buttons.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Header buttons",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Configuring the header bar",permalink:"/router/docs/guides/headers"},next:{title:"Nesting navigators",permalink:"/router/docs/guides/nesting-navigators"}},c={},u=[],l={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Ports the guide ",(0,o.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/header-buttons"},"React Navigation: header buttons")," to Expo Router."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="File System"',title:'"File','System"':!0},"app/\n  _layout.js\n  home.js\n")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Stack.Screen name={routeName} />")," component in the layout component route to statically configure screen options. This is useful for tab bars or drawers which need to have an icon defined ahead of time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=app/_layout.js",title:"app/_layout.js"},'import { Stack } from "expo-router";\n\nexport default function Layout() {\n  return (\n    <Stack\n      initialRouteName="home"\n      // https://reactnavigation.org/docs/headers#sharing-common-options-across-screens\n      // highlight-next-line\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: "#f4511e",\n        },\n        headerTintColor: "#fff",\n        headerTitleStyle: {\n          fontWeight: "bold",\n        },\n      }}\n    >\n      {/* Optionally configure static options outside the route. */}\n      // highlight-next-line\n      <Stack.Screen name="home" options={{}} />\n    </Stack>\n  );\n}\n')),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Stack.Screen />")," component in the child route to dynamically configure options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=app/home.js",title:"app/home.js"},'import { useLayoutEffect } from "react";\nimport { View, Button, Text, Image } from "react-native";\n// highlight-next-line\nimport { Stack } from "expo-router";\n\nfunction LogoTitle() {\n  return (\n    <Image\n      style={{ width: 50, height: 50 }}\n      source={require("@expo/snack-static/react-native-logo.png")}\n    />\n  );\n}\n\nexport default function Home() {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    // https://reactnavigation.org/docs/header-buttons#header-interaction-with-its-screen-component\n    <>\n      // highlight-next-line\n      <Stack.Screen\n        options={{\n          headerTitle: (props) => <LogoTitle {...props} />,\n          headerRight: () => (\n            <Button\n              onPress={() => setCount((c) => c + 1)}\n              title="Update count"\n            />\n          ),\n        }}\n      />\n      <Text>Count: {count}</Text>\n    </>\n  );\n}\n')))}p.isMDXComponent=!0}}]);