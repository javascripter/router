"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2935],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},408:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Testing with Jest",sidebar_class_name:"hidden"},i=void 0,l={unversionedId:"lab/jest",id:"lab/jest",title:"Testing with Jest",description:"This guide refers to upcoming Expo Router features, all of which are experimental.",source:"@site/docs/lab/jest.md",sourceDirName:"lab",slug:"/lab/jest",permalink:"/router/docs/lab/jest",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/lab/jest.md",tags:[],version:"current",frontMatter:{title:"Testing with Jest",sidebar_class_name:"hidden"},sidebar:"tutorialSidebar",previous:{title:"Handoff",permalink:"/router/docs/lab/handoff"},next:{title:"Root HTML",permalink:"/router/docs/lab/root-html"}},s={},p=[{value:"Setup",id:"setup",level:2},{value:"Writing a test",id:"writing-a-test",level:2},{value:"Renders",id:"renders",level:2},{value:"renderRouter()",id:"renderrouter",level:3},{value:"<code>initialRoute</code> option",id:"initialroute-option",level:5},{value:"Rendering the <code>/app</code> directory",id:"rendering-the-app-directory",level:4},{value:"Rendering a mock <code>/app</code> directory",id:"rendering-a-mock-app-directory",level:4},{value:"Rendering the <code>/app</code> directory, with file mocks",id:"rendering-the-app-directory-with-file-mocks",level:4},{value:"Mock routes",id:"mock-routes",level:4},{value:"Matchers",id:"matchers",level:2},{value:"<code>.toHavePathname()</code>",id:"tohavepathname",level:3},{value:"<code>.toHaveSegments()</code>",id:"tohavesegments",level:3},{value:"<code>.toHaveSearchParams()</code>",id:"tohavesearchparams",level:3},{value:"Screen methods",id:"screen-methods",level:2},{value:"<code>getPathname()</code>",id:"getpathname",level:3},{value:"<code>getSearchParams()</code>",id:"getsearchparams",level:3}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This guide refers to upcoming Expo Router features, all of which are experimental.")),(0,a.kt)("p",null,"Expo Router adds first-class support for testing with ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/"},(0,a.kt)("inlineCode",{parentName:"a"},"Jest"))),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"yarn add -D jest @testing-library/react-native")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install --save-dev jest @testing-library/react-native")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We recommend using the ",(0,a.kt)("inlineCode",{parentName:"p"},"jest-expo")," preset to quickly configure Jest for React Native"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// jest.config.js\nmodule.exports = {\n  preset: "jest-expo",\n  roots: ["."],\n};\n'))),(0,a.kt)("h2",{id:"writing-a-test"},"Writing a test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// my-component.test.ts\nimport { screen, renderRouter } from "expo-router/testing-library";\n\ntest("render the application", async () => {\n  renderRouter();\n  const signInText = await screen.findByText("Sign In");\n  expect(signInText).toBeTruthy();\n});\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"renderRouter")," will forcefully enable ",(0,a.kt)("inlineCode",{parentName:"p"},"jest.useFakeTimers()"),". Please refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/timer-mocks"},"Jest Docs")," on how to advance and/or run timers.")),(0,a.kt)("h2",{id:"renders"},"Renders"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"expo-router/testing-library")," can be used as a dropin replacement for ",(0,a.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-testing-library/"},(0,a.kt)("inlineCode",{parentName:"a"},"@testing-library/react-native")),"."),(0,a.kt)("p",null,"Additionally, the following extra functions are available"),(0,a.kt)("h3",{id:"renderrouter"},"renderRouter()"),(0,a.kt)("p",null,"A helper function that wraps ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"@testing-library/react-native"),". Renders your Expo Router application in a way that allows for testing."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"renderRouter()")," has 3 methods of rendering:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Rendering the ",(0,a.kt)("inlineCode",{parentName:"li"},"/app")," directory"),(0,a.kt)("li",{parentName:"ul"},"Rendering a mock ",(0,a.kt)("inlineCode",{parentName:"li"},"/app")," directory"),(0,a.kt)("li",{parentName:"ul"},"Rendering the ",(0,a.kt)("inlineCode",{parentName:"li"},"/app")," directory, with file mocks")),(0,a.kt)("p",null,"All render options also accepts the same options as ",(0,a.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-testing-library/docs/api#render-options"},(0,a.kt)("inlineCode",{parentName:"a"},"render")),", with the following additional options:"),(0,a.kt)("h5",{id:"initialroute-option"},(0,a.kt)("inlineCode",{parentName:"h5"},"initialRoute")," option"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"initialRoute?: string\n")),(0,a.kt)("p",null,"This option allows you to control the initial rendered route."),(0,a.kt)("h4",{id:"rendering-the-app-directory"},"Rendering the ",(0,a.kt)("inlineCode",{parentName:"h4"},"/app")," directory"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"renderRouter(directory?: string, options?: RenderOptions)")),(0,a.kt)("p",null,"Renders application specified directory (defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"app/"),")"),(0,a.kt)("h4",{id:"rendering-a-mock-app-directory"},"Rendering a mock ",(0,a.kt)("inlineCode",{parentName:"h4"},"/app")," directory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"renderRouter(routes: Record<string, Route>, options?: RenderOptions)`\n")),(0,a.kt)("p",null,"Renders an app using only the routes w/ components specified. This allows you to quickly setup isolated environments to test your components"),(0,a.kt)("h4",{id:"rendering-the-app-directory-with-file-mocks"},"Rendering the ",(0,a.kt)("inlineCode",{parentName:"h4"},"/app")," directory, with file mocks"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"\nrenderRouter(routes: { appDir?: string; overrides?: Record<string, Route> }, options?: RenderOptions)`\n")),(0,a.kt)("p",null,"The hybrid approach mixes both file system routing with inline overrides. This mode allows you to easily test your application, while mocking only certain routes and/or layouts."),(0,a.kt)("h4",{id:"mock-routes"},"Mock routes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"type Route =\n  | () => ReactElement\n  | { default: () => ReactELement }\n")),(0,a.kt)("p",null,"When mocking a router, you can either define it as a function, or an object with a default property"),(0,a.kt)("h2",{id:"matchers"},"Matchers"),(0,a.kt)("h3",{id:"tohavepathname"},(0,a.kt)("inlineCode",{parentName:"h3"},".toHavePathname()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"expect(screen).toHavePathname(string);\n")),(0,a.kt)("p",null,"Asserts that the currently rendered screen has the expected pathname."),(0,a.kt)("h3",{id:"tohavesegments"},(0,a.kt)("inlineCode",{parentName:"h3"},".toHaveSegments()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"expect(screen).toHaveSegments(string[]);\n")),(0,a.kt)("p",null,"Asserts that the currently rendered screen has the expected segments."),(0,a.kt)("h3",{id:"tohavesearchparams"},(0,a.kt)("inlineCode",{parentName:"h3"},".toHaveSearchParams()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"expect(screen).toHaveSearchParams(object);\n")),(0,a.kt)("p",null,"Asserts that the currently rendered screen has the expected search params"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you need to assett the URLSearchParams object, you can do so via `screen.getSearchParams()``")),(0,a.kt)("h2",{id:"screen-methods"},"Screen methods"),(0,a.kt)("h3",{id:"getpathname"},(0,a.kt)("inlineCode",{parentName:"h3"},"getPathname()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const pathname = screen.getPathname();\n")),(0,a.kt)("p",null,"Returns the pathname of the currently rendered screen."),(0,a.kt)("h3",{id:"getsearchparams"},(0,a.kt)("inlineCode",{parentName:"h3"},"getSearchParams()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const urlSearchParams: URLSearchParams = screen.getSearchParams();\n")),(0,a.kt)("p",null,"Returns the URLSearchParams of the currently rendered screen."))}d.isMDXComponent=!0}}]);